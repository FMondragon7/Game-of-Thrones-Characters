<div id="smoke-bkg" class="fixed top-0 w-full h-full"></div>

<script>
  // biblioteca animaciones 3D
  import * as THREE from "three";

  const $bgk = document.getElementById("smoke-bkg");

  let h = window.innerHeight;
  let w = window.innerWidth;

  // inicializar three js
  // 3 cosas basicas: escena, camara, renderizador

  // escena ðŸŽ¬
  const scene = new THREE.Scene();

  // camara ðŸ“·
  // PersepectiveCamara props: fov, aspect ratio, near, far
  const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
  camera.position.z = 10;
  scene.add(camera);

  // renderizador ðŸŽ¨
  const renderer = new THREE.WebGLRenderer();
  renderer.setSize(w, h);
  // color de fondo
  renderer.setClearColor(0x000000, 0);

  $bgk?.appendChild(renderer.domElement);

  // crear una luz
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(-1, 3, 1);
  scene.add(light);

  // para visualizar de donde viene la luz
  // const helper = new THREE.DirectionalLightHelper(light, 5);
  // scene.add(helper);

  // para crear un objecto necesitamos 3 cosas
  // 1. geometria
  // 2. material
  // 3. mesh

  const smokeParticles: THREE.Mesh[] = [];

  const loader = new THREE.TextureLoader();
  // en localhost no pasa nada, pero si desplegamos en un servidor, puede ser necesario
  loader.crossOrigin = "";

  loader.load("/smoke.webp", (texture) => {
    // 1. geometria
    // crear un plano de 300x300
    const smokeGeo = new THREE.PlaneGeometry(300, 300);

    // 2. material
    const smokeMaterial = new THREE.MeshLambertMaterial({
      map: texture,
      transparent: true,
      opacity: 0.06,
    });

    const NUM_OF_PARTICLES = 300;
    for (let p = 0; p < NUM_OF_PARTICLES; p++) {
      // crear la malla con la geometria y el material
      const particle = new THREE.Mesh(smokeGeo, smokeMaterial);
      // posicionar aleatoriamente
      particle.position.set(
        Math.random() * 500 - 250, // x
        Math.random() * 500 - 250, // y
        Math.random() * 1000 - 100, // z
      );
      // aleatoriamente la z
      particle.rotation.z = Math.random() * 360;
      // aÃ±adimos la particula a la escena
      scene.add(particle);
      // aÃ±adimos la particula al array
      smokeParticles.push(particle);
    }
  });

  function resize() {
    h = window.innerHeight;
    w = window.innerWidth;
    camera.aspect = w / h;
    camera.updateProjectionMatrix();
    renderer.setSize(w, h);
  }

  function debounce(callback: Function, wait: number) {
    let timeout: Number | null = null;
    return (...args: []) => {
      clearTimeout(timeout as number);
      timeout = setTimeout(() => {
        timeout = null;
        callback(...args);
      }, wait);
    };
  }

  function animate() {
    requestAnimationFrame(animate);

    smokeParticles.forEach((p) => {
      p.rotation.z += 0.0005;
    });

    renderer.render(scene, camera);
  }

  animate();

  const debouncedResize = debounce(resize, 10);

  window.addEventListener("resize", debouncedResize);

  // ...
</script>
